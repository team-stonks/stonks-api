// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stonks_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StonksApiClient is the client API for StonksApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StonksApiClient interface {
	GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type stonksApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStonksApiClient(cc grpc.ClientConnInterface) StonksApiClient {
	return &stonksApiClient{cc}
}

func (c *stonksApiClient) GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/StonksApi/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StonksApiServer is the server API for StonksApi service.
// All implementations must embed UnimplementedStonksApiServer
// for forward compatibility
type StonksApiServer interface {
	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	mustEmbedUnimplementedStonksApiServer()
}

// UnimplementedStonksApiServer must be embedded to have forward compatible implementations.
type UnimplementedStonksApiServer struct {
}

func (UnimplementedStonksApiServer) GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedStonksApiServer) mustEmbedUnimplementedStonksApiServer() {}

// UnsafeStonksApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StonksApiServer will
// result in compilation errors.
type UnsafeStonksApiServer interface {
	mustEmbedUnimplementedStonksApiServer()
}

func RegisterStonksApiServer(s grpc.ServiceRegistrar, srv StonksApiServer) {
	s.RegisterService(&StonksApi_ServiceDesc, srv)
}

func _StonksApi_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StonksApiServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StonksApi/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StonksApiServer).GetHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StonksApi_ServiceDesc is the grpc.ServiceDesc for StonksApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StonksApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StonksApi",
	HandlerType: (*StonksApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _StonksApi_GetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stonks.proto",
}
